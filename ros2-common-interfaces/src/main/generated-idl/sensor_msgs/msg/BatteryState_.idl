#ifndef __sensor_msgs__msg__BatteryState__idl__
#define __sensor_msgs__msg__BatteryState__idl__

#include "std_msgs/msg/./Header_.idl"
module sensor_msgs
{
  module msg
  {
    module dds
    {
      /**
       * Power supply status constants
       */
      const octet POWER_SUPPLY_STATUS_UNKNOWN =
      0;

      const octet POWER_SUPPLY_STATUS_CHARGING =
      1;

      const octet POWER_SUPPLY_STATUS_DISCHARGING =
      2;

      const octet POWER_SUPPLY_STATUS_NOT_CHARGING =
      3;

      const octet POWER_SUPPLY_STATUS_FULL =
      4;

      /**
       * Power supply health constants
       */
      const octet POWER_SUPPLY_HEALTH_UNKNOWN =
      0;

      const octet POWER_SUPPLY_HEALTH_GOOD =
      1;

      const octet POWER_SUPPLY_HEALTH_OVERHEAT =
      2;

      const octet POWER_SUPPLY_HEALTH_DEAD =
      3;

      const octet POWER_SUPPLY_HEALTH_OVERVOLTAGE =
      4;

      const octet POWER_SUPPLY_HEALTH_UNSPEC_FAILURE =
      5;

      const octet POWER_SUPPLY_HEALTH_COLD =
      6;

      const octet POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE =
      7;

      const octet POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE =
      8;

      /**
       * Power supply technology (chemistry) constants
       */
      const octet POWER_SUPPLY_TECHNOLOGY_UNKNOWN =
      0;

      const octet POWER_SUPPLY_TECHNOLOGY_NIMH =
      1;

      const octet POWER_SUPPLY_TECHNOLOGY_LION =
      2;

      const octet POWER_SUPPLY_TECHNOLOGY_LIPO =
      3;

      const octet POWER_SUPPLY_TECHNOLOGY_LIFE =
      4;

      const octet POWER_SUPPLY_TECHNOLOGY_NICD =
      5;

      const octet POWER_SUPPLY_TECHNOLOGY_LIMN =
      6;


      /**
       * Constants are chosen to match the enums in the linux kernel
       * defined in include/linux/power_supply.h as of version 3.7
       * The one difference is for style reasons the constants are
       * all uppercase not mixed case.
       */
      @TypeCode(type="sensor_msgs::msg::dds_::BatteryState_")
      struct BatteryState
      {
        std_msgs::msg::dds::Header header;
        /**
         * Voltage in Volts (Mandatory)
         */
        float voltage;
        /**
         * Negative when discharging (A)  (If unmeasured NaN)
         */
        float current;
        /**
         * Current charge in Ah  (If unmeasured NaN)
         */
        float charge;
        /**
         * Capacity in Ah (last full capacity)  (If unmeasured NaN)
         */
        float capacity;
        /**
         * Capacity in Ah (design capacity)  (If unmeasured NaN)
         */
        float design_capacity;
        /**
         * Charge percentage on 0 to 1 range  (If unmeasured NaN)
         */
        float percentage;
        /**
         * The charging status as reported. Values defined above
         */
        octet power_supply_status;
        /**
         * The battery health metric. Values defined above
         */
        octet power_supply_health;
        /**
         * The battery chemistry. Values defined above
         */
        octet power_supply_technology;
        /**
         * True if the battery is present
         */
        boolean present;
        /**
         * An array of individual cell voltages for each cell in the pack
         */
        sequence<float> cell_voltage;
        /**
         * If individual voltages unknown but number of cells known set each to NaN
         * The location into which the battery is inserted. (slot number or plug)
         */
        string location;
        /**
         * The best approximation of the battery serial number
         */
        string serial_number;
      };
    };
  };
};

#endif
