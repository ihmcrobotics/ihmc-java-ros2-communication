#ifndef __sensor_msgs__msg__MultiDOFJointState__idl__
#define __sensor_msgs__msg__MultiDOFJointState__idl__

#include "geometry_msgs/msg/./Transform_.idl"
#include "geometry_msgs/msg/./Twist_.idl"
#include "geometry_msgs/msg/./Wrench_.idl"
#include "std_msgs/msg/./Header_.idl"
module sensor_msgs
{
  module msg
  {
    module dds
    {

      /**
       * Representation of state for joints with multiple degrees of freedom,
       * following the structure of JointState.
       * 
       * It is assumed that a joint in a system corresponds to a transform that gets applied
       * along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
       * and those 3DOF can be expressed as a transformation matrix, and that transformation
       * matrix can be converted back to (x, y, yaw)
       * 
       * Each joint is uniquely identified by its name
       * The header specifies the time at which the joint states were recorded. All the joint states
       * in one message have to be recorded at the same time.
       * 
       * This message consists of a multiple arrays, one for each part of the joint state.
       * The goal is to make each of the fields optional. When e.g. your joints have no
       * wrench associated with them, you can leave the wrench array empty.
       * 
       * All arrays in this message should have the same size, or be empty.
       * This is the only way to uniquely associate the joint name with the correct
       * states.
       */
      @TypeCode(type="sensor_msgs::msg::dds_::MultiDOFJointState_")
      struct MultiDOFJointState
      {
        std_msgs::msg::dds::Header header;
        sequence<string> joint_names;
        sequence<geometry_msgs::msg::dds::Transform> transforms;
        sequence<geometry_msgs::msg::dds::Twist> twist;
        sequence<geometry_msgs::msg::dds::Wrench> wrench;
      };
    };
  };
};

#endif
