// generated from rosidl_generator_dds_idl/resource/msg.idl.em

#ifndef __sensor_msgs__msg__Range__idl__
#define __sensor_msgs__msg__Range__idl__

#include "std_msgs/msg/./Header_.idl"
module sensor_msgs
{
  module msg
  {
    module dds
    {
      /**
       * Radiation type enums
       * If you want a value added to this list, send an email to the ros-users list
       */
      const octet Range__ULTRASOUND =
      0;

      const octet Range__INFRARED =
      1;


      /**
       * Single range reading from an active ranger that emits energy and reports
       * one range reading that is valid along an arc at the distance measured.
       * This message is  not appropriate for laser scanners. See the LaserScan
       * message if you are working with a laser scanner.
       * This message also can represent a fixed-distance (binary) ranger.  This
       * sensor will have min_range===max_range===distance of detection.
       * These sensors follow REP 117 and will output -Inf if the object is detected
       * and +Inf if the object is outside of the detection range.
       * returned the distance reading
       * (sound, IR, etc) [enum]
       * valid for [rad]
       * the object causing the range reading may have
       * been anywhere within -field_of_view/2 and
       * field_of_view/2 at the measured range.
       * 0 angle corresponds to the x-axis of the sensor.
       * Fixed distance rangers require min_range==max_range
       */
      @TypeCode(type="sensor_msgs::msg::dds_::Range_")
      struct Range
      {
        /**
         * timestamp in the header is the time the ranger
         */
        std_msgs::msg::dds::Header header;
        /**
         * the type of radiation used by the sensor
         */
        octet radiation_type;
        /**
         * the size of the arc that the distance reading is
         */
        float field_of_view;
        /**
         * minimum range value [m]
         */
        float min_range;
        /**
         * maximum range value [m]
         */
        float max_range;
        /**
         * range data [m]
         */
        float range;
      };  // struct Range
    };  // module dds_
  };  // module msg
};  // module sensor_msgs

#endif  // __sensor_msgs__msg__Range__idl__
