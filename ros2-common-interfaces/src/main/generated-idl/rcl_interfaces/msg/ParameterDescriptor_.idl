#ifndef __rcl_interfaces__msg__ParameterDescriptor__idl__
#define __rcl_interfaces__msg__ParameterDescriptor__idl__

#include "rcl_interfaces/msg/./FloatingPointRange_.idl"
#include "rcl_interfaces/msg/./IntegerRange_.idl"
module rcl_interfaces
{
  module msg
  {
    module dds
    {

      /**
       * This is the message to communicate a parameter's descriptor.
       * Parameter constraints
       * If any of the following sequences are not empty, then the constraint inside of
       * them apply to this parameter.
       */
      @TypeCode(type="rcl_interfaces::msg::dds_::ParameterDescriptor_")
      struct ParameterDescriptor
      {
        string name;
        /**
         * Enum values are defined in the `ParameterType.msg` message.
         */
        octet type;
        /**
         * Description of the parameter, visible from introspection tools.
         */
        string description;
        /**
         * Plain English description of additional constraints which cannot be expressed
         * with the available constraints, e.g. "only prime numbers".
         * By convention, this should only be used to clarify constraints which cannot
         * be completely expressed with the parameter constraints below.
         */
        string additional_constraints;
        /**
         * If 'true' then the value cannot change after it has been initialized.
         */
        boolean read_only;
        /**
         * FloatingPointRange consists of a from_value, a to_value, and a step.
         * FloatingPointRange and IntegerRange are mutually exclusive.
         */
        sequence<rcl_interfaces::msg::dds::FloatingPointRange, 1> floating_point_range;
        /**
         * IntegerRange consists of a from_value, a to_value, and a step.
         * FloatingPointRange and IntegerRange are mutually exclusive.
         */
        sequence<rcl_interfaces::msg::dds::IntegerRange, 1> integer_range;
      };
    };
  };
};

#endif
