/*
 * Copyright 2017 Florida Institute for Human and Machine Cognition (IHMC)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package us.ihmc.ros2.rosidl;

import us.ihmc.commons.PrintTools;
import us.ihmc.idl.generator.IDLGenerator;
import us.ihmc.rosidl.Ros2MsgToIdlGenerator;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Collections;
import java.util.HashMap;

/**
 * Utility to convert ROS2 IDL files (.msg & .srv) to Java files compatible with IHMC Pub/Sub
 *
 * @author Jesper Smith
 */
public class RosInterfaceGenerator
{
   private Ros2MsgToIdlGenerator ros2MsgToIdlGenerator;

   // Holder for all packages found
   private final HashMap<String, Path> customIDLFiles = new HashMap<>();

   /**
    * Compile Ros interfaces to Java files for IHMC pub sub
    *
    * @throws IOException if no temporary files and directories can be made
    */
   public RosInterfaceGenerator() throws IOException
   {
      ros2MsgToIdlGenerator = new Ros2MsgToIdlGenerator();
   }

   /**
    * Add a directory with ros packages to the list of interfaces to be compiled.
    *
    * The expected directory structure is
    * - rootPath
    * - packageName
    * - package.xml
    *
    * A package xml with at least <name /> and optionally <build_depends />
    *
    * @param rootPath The root directory of packages to add
    * @throws IOException If the rootPath cannot be read
    */
   public void addPackageRoot(Path rootPath) throws IOException
   {
      ros2MsgToIdlGenerator.addPackageRoot(rootPath);
   }

   /**
    * Generate java files for all packages.
    *
    * This function can ber called
    *
    * @param idlDirectory directory to put .idl files in
    * @param javaDirectory directory to put generated .java files in
    * @throws IOException
    */
   public void generate(Path idlDirectory, Path javaDirectory) throws IOException
   {
      // Convert all packages to .idl
      ros2MsgToIdlGenerator.convertToIDL(idlDirectory);

      // Copy custom idl files to the idl directory
      customIDLFiles.forEach((key, path) -> {
         try
         {
            Files.copy(path, idlDirectory.resolve(key), StandardCopyOption.REPLACE_EXISTING);
         }
         catch (IOException e)
         {
            throw new RuntimeException(e);
         }
      });

      //IDLGenerator.execute(idlFile, packageName, targetDirectory, includePath);
      Files.find(idlDirectory, Integer.MAX_VALUE, (path, attrs) -> attrs.isRegularFile() && path.getFileName().toString().endsWith(".idl"))
           .forEach((file) -> generateJava(file, javaDirectory, idlDirectory));
   }

   /**
    * Add a directory with custom .idl files. These overload the .idl files generated by the ROS2 IDL generator
    *
    * @param rootPath root path of idl files
    * @throws IOException If the root path cannot be read
    */
   public void addCustomIDLFiles(Path rootPath) throws IOException
   {
      Files.find(rootPath, Integer.MAX_VALUE, (path, attrs) -> attrs.isRegularFile() && path.getFileName().toString().endsWith(".idl"))
           .forEach((file) -> addCustomIDLFile(file, rootPath));
   }

   /**
    * Helper function to add custom IDL files
    *
    * @param path
    * @param rootPath
    */
   private void addCustomIDLFile(Path path, Path rootPath)
   {
      String key = rootPath.relativize(path).toString();
      customIDLFiles.put(key, path);
   }

   /**
    * Helper function to convert a single .idl file in a java file
    *
    * This function will check if there is a custom verison of the .idl file registered.
    *
    * @param file
    * @param javaDirectory
    * @param idlDirectory
    */
   private void generateJava(Path file, Path javaDirectory, Path idlDirectory)
   {
      PrintTools.info(this, idlDirectory.relativize(file).toString());

      try
      {
         IDLGenerator.execute(file.toFile(), "", javaDirectory.toFile(), Collections.singletonList(idlDirectory.toFile()));
      }
      catch (IOException e)
      {
         throw new RuntimeException(e);
      }
   }
}
